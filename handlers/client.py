from keyboards import kb_client
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from data_base import sqlite_db
from datetime import datetime
import json
import datetime
from handlers import my_schedulers
from weather import get_weather
from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import Command

first_odd_week = datetime.date(2023,1,30) #–ø–µ—Ä–≤–∞—è –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
name_json = 'timetable.json'

router = Router()

#–∫–ª–∞—Å—Å –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class FSMClient(StatesGroup):
   gr = State()
   notif = State()

@router.message(Command('start'))
async def command_start(message : Message,
                     state : FSMContext):
    await state.set_state(FSMClient.gr)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É')
    my_schedulers.schedule_jobs()

#–≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(FSMClient.gr, Command(commands=["cancel"]))
@router.message(FSMClient.gr, F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
   current_state = await state.get_state()
   if current_state is None:
      return
   await state.clear()
   await message.reply('OK')

@router.message(FSMClient.gr, F.text)
async def load_gr(message: Message, state: FSMContext):
    data = {}
    data['id_user'] = message.from_user.id
    data['gr_name'] = message.text.lower()
    print(data)
    print("\n\n\n\n\n")
    await sqlite_db.sql_add_command(message)
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb_client)
    await state.clear()

@router.message(Command('help'))
async def command_help(message : Message):
    await message.answer("–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ –°–ò–ë–ì–£–¢–ò \n –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @alleksandr152", reply_markup=kb_client)

#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def edit_list(old_list):
    new_list = []
    for old in old_list:
        if (old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2][:-3] == '8:00'):
            old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'] = old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].replace('8:00:00', 'üï∞8:00 - 9:35') 
        elif (old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2][:-3] == '9:50'):
            old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'] = old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].replace('9:50:00','üï∞9:50 - 11:25')
        elif (old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2][:-3] == '11:40'):
            old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'] = old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].replace('11:40:00','üï∞11:40 - 13:15') 
        elif (old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2][:-3] == '13:45'):
            old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'] = old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].replace('13:45:00','üï∞13:45 - 15:20') 
        elif (old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2][:-3] == '15:35'):
            old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'] = old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].replace('15:35:00','üï∞15:35 - 17:10') 
        elif (old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2][:-3] == '17:25'):
            old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'] = old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].replace('17:25:00', 'üï∞17:25 - 19:00') 
        elif (old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2][:-3] == '19:00'):
            old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'] = old['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].replace('19:00:00','üï∞19:00 - 20:30') 
        
        old['–ê—É–¥–∏—Ç–æ—Ä–∏—è'] = 'üö™'+old['–ê—É–¥–∏—Ç–æ—Ä–∏—è']
        old['–§–∏–∑–∏—á–µ—Å–∫–æ–µ–õ–∏—Ü–æ'] = 'üéì' + old['–§–∏–∑–∏—á–µ—Å–∫–æ–µ–õ–∏—Ü–æ'] 
        old['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞'] = '‚úèÔ∏è' + old['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']

        if (old['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è'] == '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è'):
            old['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è'] = '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ'
        elif (old['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è'] == '–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è'):
            old['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è'] = '–õ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'
        elif (old['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è'] == '–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è'):
            old['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è'] = '–õ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'
        new_list.append(old)
    return new_list

#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ json
async def find_today_json(gr_name, json_name):
    with open(json_name, 'r') as file:
        data = json.load(file)
    today_data = datetime.date.today()
    list_today = []
    for tmp in data:
        if (tmp['–ì—Ä—É–ø–ø–∞'].lower() == gr_name.lower() and int(tmp['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition('.')[0]) == ((((today_data-first_odd_week).days)%14)+1)):
            list_today.append(tmp)

    list_today = sorted(list_today, key=lambda d: int(d['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2].partition(':')[0]))
    list_today = await edit_list(list_today)
    return list_today

@router.message(F.text.lower() == '—Å–µ–≥–æ–¥–Ω—è')
async def today_tb(message : Message):
    gr_name = await sqlite_db.sql_find_gr_name(message)
    list_classes = await find_today_json(gr_name,name_json)

    if list_classes == []:
        await message.answer('–ù–µ—Ç –ø–∞—Ä!!!')
        return
    str_out = ''
    str_out += list_classes[0]['–î–µ–Ω—å–ù–µ–¥–µ–ª–∏']+'\n\n'
    for tmp in list_classes:
        str_out += tmp['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']+'\n'+tmp['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2]+'\n'+tmp['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']+'\n'+tmp['–§–∏–∑–∏—á–µ—Å–∫–æ–µ–õ–∏—Ü–æ']+'\n'+tmp['–ê—É–¥–∏—Ç–æ—Ä–∏—è']+'\n\n'
    
    await message.answer(str_out)
    

#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ json
async def find_tomorrow_json(gr_name, json_name):
    with open(json_name, 'r') as file:
        data = json.load(file)
    today_data = datetime.date.today()
    list_tomorrow = []
    for tmp in data:
        if (tmp['–ì—Ä—É–ø–ø–∞'].lower() == gr_name.lower() and int(tmp['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition('.')[0]) == ((((today_data-first_odd_week).days)%14)+2)):
            list_tomorrow.append(tmp)

    list_tomorrow =sorted(list_tomorrow, key=lambda d: int(d['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2].partition(':')[0])) 
    list_tomorrow = await edit_list(list_tomorrow)
    return list_tomorrow

@router.message(F.text.lower() == '–∑–∞–≤—Ç—Ä–∞')
async def tomorrow_tb(message : Message):
    gr_name = await sqlite_db.sql_find_gr_name(message)
    list_classes = await find_tomorrow_json(gr_name,name_json)
    if list_classes == []:
        await message.answer('–ù–µ—Ç –ø–∞—Ä!!!')
        return
    str_out = ''
    str_out += list_classes[0]['–î–µ–Ω—å–ù–µ–¥–µ–ª–∏']+'\n\n'
    for tmp in list_classes:
        str_out += tmp['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']+'\n'+tmp['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2]+'\n'+tmp['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']+'\n'+tmp['–§–∏–∑–∏—á–µ—Å–∫–æ–µ–õ–∏—Ü–æ']+'\n'+tmp['–ê—É–¥–∏—Ç–æ—Ä–∏—è']+'\n\n'
    await message.answer(str_out)

#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ json
async def find_week_json(gr_name, json_name):
    with open(json_name, 'r') as file:
        data = json.load(file)
    today_data = datetime.date.today()
    list_week = []

    if ((((today_data-first_odd_week).days)%14)+1) < 7 :
        for tmp_day in range(1, 7):
             list_today = []
             for tmp in data:
                if (tmp['–ì—Ä—É–ø–ø–∞'].lower() == gr_name.lower() and int(tmp['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition('.')[0]) == tmp_day):
                    list_today.append(tmp)
             list_today = sorted(list_today, key=lambda d: int(d['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2].partition(':')[0]))
             list_today = await edit_list(list_today)
             list_week.append(list_today)
    else:
        for tmp_day in range(8, 14):
             list_today = []
             for tmp in data:
                if (tmp['–ì—Ä—É–ø–ø–∞'].lower() == gr_name.lower() and int(tmp['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition('.')[0]) == tmp_day):
                    list_today.append(tmp)
             list_today = sorted(list_today, key=lambda d: int(d['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2].partition(':')[0]))
             list_today = await edit_list(list_today)
             list_week.append(list_today)
    return list_week

@router.message(F.text.lower() == '–Ω–µ–¥–µ–ª—è')
async def week_tb(message : Message):
    gr_name = await sqlite_db.sql_find_gr_name(message)
    list_classes = await find_week_json(gr_name,name_json)
    days_of_week = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫','–í—Ç–æ—Ä–Ω–∏–∫','–°—Ä–µ–¥–∞','–ß–µ–≤–µ—Ä–≥','–ü—è—Ç–Ω–∏—Ü–∞','–°—É–±–±–æ—Ç–∞']
    for index, day in enumerate(list_classes):
        str_out = ''
        if day == []:
            await message.answer(days_of_week[index]+'\n\n–ù–µ—Ç –ø–∞—Ä!!!\n\n--------------------------')
            continue
        
        str_out += day[0]['–î–µ–Ω—å–ù–µ–¥–µ–ª–∏']+'\n\n'
        for tmp in day:
             str_out += tmp['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']+'\n'+tmp['–í—Ä–µ–º—è–ù–∞—á–∞–ª–∞'].partition(' ')[2]+'\n'+tmp['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']+'\n'+tmp['–§–∏–∑–∏—á–µ—Å–∫–æ–µ–õ–∏—Ü–æ']+'\n'+tmp['–ê—É–¥–∏—Ç–æ—Ä–∏—è']+'\n\n'
        await message.answer(str_out+'\n--------------------------')

#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã
@router.message(F.text.lower() == '–ø–æ–≥–æ–¥–∞')
async def weather_tb(message : Message):
    await message.answer(get_weather())

@router.message(Command('notification'))
async def change_notification(message : Message, state : FSMContext):
    await state.set_state(FSMClient.notif)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 19:00, –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–≤–µ–¥–∏—Ç–µ -')

#–≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(FSMClient.notif, Command(commands=["cancel"]))
@router.message(FSMClient.notif, F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
   current_state = await state.get_state()
   if current_state is None:
      return
   await state.clear()
   await message.reply('OK')

@router.message(FSMClient.notif, F.text)
async def load_notif(message: Message, state: FSMContext):
    data = {}
    data['id_user'] = message.from_user.id
    data['time'] = message.text
    print(data)
    print("\n\n\n\n\n")
    await sqlite_db.sql_add_notif(message)
    await state.clear()